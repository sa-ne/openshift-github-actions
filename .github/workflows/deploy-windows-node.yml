name: deploy-windows-node

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region to deploy cluster to'
        required: true
      s3_storage:
        description: 'AWS S3 storage bucket name (i.e. ocp-s3-storage)'
        required: true
      ocpAPI:
        description: 'OpenShift API endpoint (eg. https://api.ocp-15.sandbox1900.opentlc.com:6443)'
        required: true
      ami:
        description: 'AWS ami to be used for machineSet. Default: Windows_Server-2019-English-Full-ContainersLatest-2021.04.14'
        required: true
        default: 'ami-015451c8bbe8e7650'
      containerImage:
        description: 'Container Image to pull from registry'
        required: true
        default: 'mcr.microsoft.com/windows/servercore:1809'

jobs:
  deploy-windows-node:
    runs-on: macos-latest
    env:
      lcl_install_dir: windows-node-deployment-${{ github.run_number }}

    steps:
      - name: "Checkout ${{ github.ref }}"
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}

      - name: Install OpenShift CLI
        uses: redhat-actions/oc-installer@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Authenticate with OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ github.event.inputs.ocpAPI }}
          openshift_username: ${{ secrets.OC_USER }}
          openshift_password: ${{ secrets.OC_PASSWORD }}
          insecure_skip_tls_verify: true

      - name: Create SSH key for WMCO
        shell: bash
        run: |
          mkdir -p ./${{ env.lcl_install_dir }}/ssh-keys/
          ssh-keygen -t rsa -b 4096 -m PEM -q -N "" -f "./${{ env.lcl_install_dir }}/ssh-keys/${{ env.lcl_install_dir }}-wmco"
          aws s3 sync ./${{ env.lcl_install_dir }}/ssh-keys/ s3://${{ github.event.inputs.s3_storage }}/${{ env.lcl_install_dir }}/ssh-keys/

      - name: Install WMCO
        shell: bash
        run: |
          oc apply -f ./crd/wmco-namespace.yaml
          oc apply -f ./crd/wmco-og.yaml
          oc apply -f ./crd/wmco-sub.yaml
          echo "verifying the WMCO installation:"
          oc get csv -n openshift-windows-machine-config-operator

      - name: Associate SSH key to WMCO
        shell: bash
        run: |
          if [ "$(oc get secret cloud-private-key -n openshift-windows-machine-config-operator --ignore-not-found -o name)" = "secret/cloud-private-key" ]; then
            echo "Secret cloud-private-key already exists"
          else
            echo "Creating secret cloud-private-key"
            oc create secret generic cloud-private-key --from-file=private-key.pem=./${{ env.lcl_install_dir }}/ssh-keys/${{ env.lcl_install_dir }}-wmco -n openshift-windows-machine-config-operator
          fi

      - name: Deploy MachineSet for Windows
        shell: bash
        run: |
          export infrastructure_id=$(oc get -o jsonpath='{.status.infrastructureName}{"\n"}' infrastructure cluster)
          export zone=${{ github.event.inputs.region }}a
          export email=${{ secrets.EMAIL }}
          export windows_base_ami=${{ github.event.inputs.ami }}
          export region=${{ github.event.inputs.region }}
          export delete_by=NEVER
          export always_up=false
          envsubst < ./crd/aws-machineset-win-template.yaml >> ./${{ env.lcl_install_dir }}/aws-machineset-win.yaml
          oc apply -f ./${{ env.lcl_install_dir }}/aws-machineset-win.yaml
          aws s3 sync ./${{ env.lcl_install_dir }}/ s3://${{ github.event.inputs.s3_storage }}/${{ env.lcl_install_dir }}/
          echo "Waiting for Windows MachineSet to become Available..."
          until oc get machineset ${infrastructure_id}-windows-worker-${zone} -n openshift-machine-api -o json | jq -e '(.status.availableReplicas == 1)' | grep -m 1 'true'; do sleep 2; done

      - name: Pre-pull Windows container image job
        shell: bash
        run: |
          export windowsIP=$(oc get node -l kubernetes.io/os=windows,node-role.kubernetes.io/worker -o json | jq -r '.items[0].status.addresses[0].address')
          export containerImage=${{ github.event.inputs.containerImage }}
          export sshkeySecretName='cloud-private-key'
          export id=${{ github.run_number }}
          envsubst < ./crd/prepull-image-template.yaml >> ./${{ env.lcl_install_dir }}/prepull-image.yaml
          oc project openshift-windows-machine-config-operator
          oc apply -f ./${{ env.lcl_install_dir }}/prepull-image.yaml
          echo "Waiting for Windows image pull to complete..."
          oc wait --for=condition=complete --timeout=300s job/pre-pull-windows-image-${{ github.run_number }}

      - name: Deploy Windows container
        shell: bash
        run: |
          export containerName='windows-demo-iis'
          export projectName='windows-workloads'
          export containerImage=${{ github.event.inputs.containerImage }}
          export id=${{ github.run_number }}
          envsubst < ./crd/windows-container-template.yaml >> ./${{ env.lcl_install_dir }}/windows-container.yaml

          if [ "$(oc get project $projectName -o name)" = "project.project.openshift.io/$projectName" ]; then
            echo "Project $projectName already exists"
          else
            echo "Creating project $projectName"
            oc new-project $projectName
          fi
          
          oc apply -f ./${{ env.lcl_install_dir }}/windows-container.yaml
          export oc_container=$(oc get pods -n windows-workloads -o json | jq -r '.items[0].status.containerStatuses[0].name')
          echo "Waiting for $oc_container to start..."
          until oc get pods -n $projectName -o json | jq -e '(.items[0].status.containerStatuses[0].started == true)' | grep -m 1 'true'; do sleep 2; done

      - name: Expose Route & verify 200 code
        shell: bash
        run: |
          export oc_container=$(oc get pods -n windows-workloads -o json | jq -r '.items[0].status.containerStatuses[0].name')
          oc expose deployment $oc_container --target-port=80 --port=8080
          oc expose svc $oc_container
          export url=$(oc get route $oc_container -o jsonpath='{.spec.host}{"\n"}')
          if [ "curl -I $url 2>/dev/null | head -n 1 | cut -d$' ' -f2 == 200" ]; then echo "200 was Returned! All Good"; fi

